# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

extends quarto

import os

###########################################################################
#                          SNIPPETS for RMARKDOWN                          #
###########################################################################
snippet rc "R code"
\`\`\`\{r ${1:`!v expand("%:t:r")`_${2:Title}}\}
${0:${VISUAL}}
\`\`\`
endsnippet

snippet rp "R plot"
\`\`\`\{r\}
#| label: ${1:`!v expand("%:t:r")`_${2:Title}}
#| fig-cap: ${3:figcap}
#| fig.height: ${4:5}
#| fig.width: ${5:7}
${0:${VISUAL}}
\`\`\`
endsnippet


snippet source "include source code without output" !b
\`\`\`{r, echo=F, cache=FALSE, results='asis'}
source_code($1)
\`\`\`
endsnippet

snippet bash "bash shell commands"
\`\`\`\{r ${3:`!v expand("%:t:r")`_${1:Title},} engine='${2:bash}'\}
${0:${VISUAL}}
\`\`\`
endsnippet

snippet julia "include julia code" !b
\`\`\`\{r ${3:`!v expand("%:t:r")`_${1:Title},} engine='julia'\}
${0:${VISUAL}}
\`\`\`
endsnippet


snippet , "quoted comma" i
, '$1'$0
endsnippet




snippet yaml
---
title: ${1:title}
author: ${2:"Joe Lewis"}
date: ${3:"\`r format(Sys.time(), '%d %B, %Y')\`"}
format:
 pdf: 
  toc: true
  number-sections: true
  link-citations: true
 html:
  code-fold: true
bibliography: ${4:/Users/joelewis/Zotero/my_library.bib}
csl: ${5:/Users/joelewis/Zotero/bmj.csl}
---
endsnippet

snippet #! "#!/usr/bin/env Rscript" b
#!/usr/bin/env Rscript
$0
endsnippet

snippet setwd "Set workingdir" b
setwd("${1:`!p snip.rv = os.getcwd()`}")
endsnippet

snippet as "Apply type on variable" w
as.$1`!p snip.rv = complete(t[1], FIELD_TYPES)`($2${VISUAL})
endsnippet

snippet is "Test type on variable" w
is.$1`!p snip.rv = complete(t[1], FIELD_TYPES)`($2${VISUAL})
endsnippet


snippet lib "Import a library"
library(${0:${VISUAL:package}})
endsnippet

snippet req "Require a file"
require(${0:${VISUAL:package}})
endsnippet

snippet source "Source a file"
source('${0:${VISUAL:file}}')
endsnippet

snippet if "If statement"
if ($1) {
	${0:${VISUAL}}
}
endsnippet

snippet eif "Else-If statement"
else if ($1) {
	${0:${VISUAL}}
}
endsnippet

snippet el "Else statement"
else {
	${0:${VISUAL}}
}
endsnippet

snippet ife "if .. else"
if ($1) {
	${2:${VISUAL}}
} else {
	$0
}
endsnippet

snippet wh "while loop"
while($1) {
	${0:${VISUAL}}
}
endsnippet

snippet for "for loop"
for (${1:item} in ${2:list}) {
	${0:${VISUAL}}
}
endsnippet

snippet fun "Function definition"
${1:name} <- function ($2) {
	${0:${VISUAL}}
}
endsnippet

snippet ret "Return call"
return(${0:${VISUAL}})
endsnippet

snippet df "Data frame"
${1:name}[${2:rows}, ${0:cols}]
endsnippet

snippet c "c function"
c(${0:${VISUAL:items}})
endsnippet

snippet li "list function"
list(${0:${VISUAL:items}})
endsnippet

snippet mat "matrix function"
matrix(${1:${VISUAL:data}}, nrow = ${2:rows}, ncol = ${0:cols})
endsnippet


snippet ggp "ggplot2 plot"
ggplot(${1:${VISUAL:data}}, aes(${0:aesthetics}))
endsnippet

snippet fis "Fisher test"
fisher.test(${1:x}, ${0:y})
endsnippet

snippet chi "Chi Squared test"
chisq.test(${1:x}, ${0:y})
endsnippet

snippet tt "t-test"
t.test(${1:x}, ${0:y})
endsnippet

snippet wil "Wilcox test"
wilcox.test(${1:x}, ${0:y})
endsnippet

snippet cor "Correlation test"
cor.test(${1:x}, ${0:y})
endsnippet

snippet fte "FTE test"
var.test(${1:x}, ${0:y})
endsnippet

snippet kvt "KV test"
kv.test(${1:x}, ${0:y})
endsnippet

#################################
#  easily create string vector  #
#################################
# Given individual words separated by spaces
# Select words (e.g. shift-v for whole line (such as the line above)
# then press <Tab> then type "vec", press <Tab> again to get this:
# var <- c("#","Given","individual","words","separated","by","spaces")
# var <- c("#","type","out","individual","words","separated","by","spaces")
snippet vec
${1:var} <- c("${0:${VISUAL:s/ /","/g}}")
endsnippet

snippet rmdopt "r markdown global options" 
knitr::opts_chunk\$set(echo = FALSE, warning = FALSE, message = FALSE)
endsnippet
